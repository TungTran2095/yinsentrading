y
version: '3.8'

services:
  # Database services
  postgres:
    image: postgres:14
    container_name: trading_postgres
    environment:
      POSTGRES_USER: trading
      POSTGRES_PASSWORD: trading_password
      POSTGRES_DB: trading_system
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - trading_network

  redis:
    image: redis:7
    container_name: trading_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - trading_network

  mongodb:
    image: mongo:6
    container_name: trading_mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: trading
      MONGO_INITDB_ROOT_PASSWORD: trading_password
    volumes:
      - mongodb_data:/data/db
    ports:
      - "27017:27017"
    restart: unless-stopped
    networks:
      - trading_network

  # Application services
  data_service:
    build:
      context: ./data_service
      dockerfile: Dockerfile
    container_name: trading_data_service
    environment:
      - POSTGRES_URI=postgresql://trading:trading_password@postgres:5432/trading_system
      - REDIS_URI=redis://redis:6379/0
      - PORT=8001
    ports:
      - "8001:8001"
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - trading_network

   model_service:
    build: ./model_service
    container_name: trading_model_service
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=trading_user
      - POSTGRES_PASSWORD=trading_password
      - POSTGRES_DB=trading_db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    ports:
      - "8002:8002"
    depends_on:
      - postgres
      - redis
      - data_service
    networks:
      - trading_network

  rl_service:
    build:
      context: ./rl_service
      dockerfile: Dockerfile
    container_name: trading_rl_service
    environment:
      - POSTGRES_URI=postgresql://trading:trading_password@postgres:5432/trading_system
      - REDIS_URI=redis://redis:6379/0
      - PORT=8003
    ports:
      - "8003:8003"
    depends_on:
      - postgres
      - redis
      - data_service
      - model_service
    restart: unless-stopped
    networks:
      - trading_network

  trading_service:
    build:
      context: ./trading_service
      dockerfile: Dockerfile
    container_name: trading_trading_service
    environment:
      - POSTGRES_URI=postgresql://trading:trading_password@postgres:5432/trading_system
      - REDIS_URI=redis://redis:6379/0
      - PORT=8004
      - DATA_SERVICE_URL=http://data_service:8001
      - MODEL_SERVICE_URL=http://model_service:8002
      - RL_SERVICE_URL=http://rl_service:8003
    ports:
      - "8004:8004"
    depends_on:
      - postgres
      - redis
      - data_service
      - model_service
      - rl_service
    restart: unless-stopped
    networks:
      - trading_network

  chat_service:
    build:
      context: ./chat_service
      dockerfile: Dockerfile
    container_name: trading_chat_service
    environment:
      - MONGODB_URI=mongodb://trading:trading_password@mongodb:27017
      - MONGODB_DB=trading_system
      - PORT=8005
      - DATA_SERVICE_URL=http://data_service:8001
      - MODEL_SERVICE_URL=http://model_service:8002
      - TRADING_SERVICE_URL=http://trading_service:8004
    ports:
      - "8005:8005"
    depends_on:
      - mongodb
      - data_service
      - model_service
      - trading_service
    restart: unless-stopped
    networks:
      - trading_network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: trading_frontend
    environment:
      - REACT_APP_API_URL=http://localhost
      - REACT_APP_DATA_SERVICE_PORT=8001
      - REACT_APP_MODEL_SERVICE_PORT=8002
      - REACT_APP_RL_SERVICE_PORT=8003
      - REACT_APP_TRADING_SERVICE_PORT=8004
      - REACT_APP_CHAT_SERVICE_PORT=8005
    ports:
      - "80:80"
    depends_on:
      - data_service
      - model_service
      - rl_service
      - trading_service
      - chat_service
    restart: unless-stopped
    networks:
      - trading_network

networks:
  trading_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  mongodb_data:
